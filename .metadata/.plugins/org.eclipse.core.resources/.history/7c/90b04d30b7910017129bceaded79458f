import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Test<T> {

	// Text reader variables
	private static File fileName;
	private static Scanner fileScan;
	private static String currLine;
	private static StringTokenizer lineToken;
	private static String word;

	//Cache 1

	private static int cacheSize1;
	private static Cache<String> cache1 = null;
	private static boolean found1 = false;
	private static int hit1;
	private static int wordCount1;

	//Cache 2
	private static int cacheSize2;
	private static Cache<String> cache2 = null;
	private static boolean found2 = false;	
	private static int hit2;
	private static int wordCount2;

	public static void main(String[] args) {
		try {
			if(args[0].equals("1") || args[0].equals("2")) {
				cacheSearch(args);
			}
			else {
				printCorrectUsage();
				System.exit(1);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}


	private static void cacheSearch(String[] args) throws FileNotFoundException{

		if(args[0].equals("2")){
			// a double cache
			if(cacheSize1 <= cacheSize2) {
				// TODO maybe another method?
				cacheSize1 = Integer.getInteger(args[1]);
				cacheSize2 = Integer.getInteger(args[2]);

				cache1 = new Cache<String>(cacheSize1);
				cache2 = new Cache<String>(cacheSize2);

				fileName = new File(args[3]);
				fileScan = new Scanner(args[3]);
				System.out.println("A cache with a size of " + cacheSize1 + ", has been created");
				System.out.println("A second cache with a size of " + cacheSize2 + ", has been created");
				FileSearch(fileScan, cache1); // any way to 

				while (fileScan.hasNextLine()) {
					currLine = fileScan.nextLine();
					lineToken = new StringTokenizer(currLine);
					while (lineToken.hasMoreTokens()) {
						String word = lineToken.nextToken();
						wordCount1++;
						found1 = false;
						cacheSearch(word); // a method for searching
					}
				}
			}
			else {
				printCorrectUsage();
				System.err.println("[level 1 cache size] must be equal to or smaller than [level 2 cache size]");
				System.exit(1);
			}
	}
	if else(args[0].equals("1")){ // TODO do this one first:
		// single chache

		cacheSize1 = Integer.getInteger(args[1]);
		cache1 = new Cache<String>(cacheSize1);
		fileName = new File(args[2]);
		fileScan = new Scanner(args[2]);
		System.out.println("A single cache with a size of " + cacheSize1 + ", has been created");
		cacheSearch(fileScan, cache1);


		while (fileScan.hasNextLine()) {
			currLine = fileScan.nextLine();
			lineToken = new StringTokenizer(currLine);
			while (lineToken.hasMoreTokens()) {
				String word = lineToken.nextToken();
				wordCount1++;
				found1 = false;
			}
		}

		//Reads in the text file and initializes the 1st-level cache.

		// TODO how to not duplicate this code?
	}
	else {
		printCorrectUsage();
		System.exit(1);
	}
}


private static void cacheSearch(/*word, cache, second cache?*/) {
	// TODO list of cache methods called:
	// cahe1.size
	// cache1.getObject
	// cache1.hit
	// cache1.addObject


	for (int i = 1; i < cache1.size(); i++) { 
		if (cache1.getObject(i-1).equals(word)) {
			found1 = true;
			hit1++;
			cache1.hit(i-1);
		}
	}
	if (found1 == false) {
		// TODO search with second cache
		cache1.addObject(word);
	}


	System.out.println("Total number of references: " + wordCount1);
	System.out.println("Total number of cache hits: " + hit1);
	System.out.println("Cache hit ratio: " + (double)hit1/(double)wordCount1);

}



/**
 * This displays error message in the command line for the user
 * 
 */
private static void printCorrectUsage() {
	System.err.println("Correct Usage for Command Prompt:");
	System.err.println("$java Test 1 [cache size] [input txt file name]\n");
	System.err.println("OR");
	System.err.println("$java Test 2 [level 1 cache size] [level 2 cache size] [input txt file name]");
}

}
